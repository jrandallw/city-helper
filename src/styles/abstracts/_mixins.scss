@use 'sass:math';

@mixin fit {
  @include position-absolute(0, 0, 0, 0);
}

@mixin push-auto {
  margin-left: auto;
  margin-right: auto;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@mixin spin($speed, $easing, $timing) {
  animation: spin $speed $easing $timing;

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }
}

@mixin responsive-font(
  $min-size: $font-size-min,
  $size: $font-size,
  $limit: $page-limit
) {
  $scale-font-enable: global-variable-exists(scale);

  $unitless-min: strip-unit($min-size);
  $unitless-size: strip-unit($size);
  $baseline: strip-unit($min-mobile);
  $font-multiplier: math.div(
    $unitless-size - $unitless-min,
    strip-unit($limit) - $baseline
  );
  $font-baseline: ($unitless-min - $font-multiplier * $baseline);

  @if $unitless-min >= $unitless-size {
    @warn 'Responsive font: min-size equal or greater than size';
  }

  font-size: #{$unitless-min}px;

  @if $scale-font-enable == true {
    // stylelint-disable-next-line
    font-size: calc(#{$unitless-min}px * #{var(--scale-font)});
  }

  @media (min-width: $min-mobile) {
    font-size: #{$unitless-min}px;

    @if $scale-font-enable == true {
      // stylelint-disable-next-line
      font-size: calc(
        (#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)) *
          #{var(--scale-font)}
      );
    } @else {
      // stylelint-disable-next-line
      font-size: calc((#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)));
    }
  }

  @media (min-width: $limit) {
    font-size: #{$unitless-size}px;

    @if $scale-font-enable == true {
      // stylelint-disable-next-line
      font-size: calc(#{$unitless-size}px * #{var(--scale-font)});
    }
  }
}

// Alias for responsive-font mixin
@mixin rf($args...) {
  @include responsive-font($args...);
}

@mixin vertically-responsive($property, $number) {
  #{$property}: $number;

  @if global-variable-exists(scale) {
    @supports (--css: variables) {
      #{$property}: calc(#{$number} * var(--scale-element));
    }
  }
}

@mixin copy($color, $weight) {
  @include rf(14, 16);
  color: $color;
  font-weight: $weight;
  line-height: $base-line-height;
}

@mixin font-face($name, $file, $weight) {
  @font-face {
    font-family: $name;
    font-weight: $weight;
    src: url('/fonts/#{$file}.woff') format('woff'),
      url('/fonts/#{$file}.woff2') format('woff2');
  }
}

// Segment customisable per-component / instance rather than being forced to work around defaults.
@mixin segment(
  $padding-top: $segment-padding,
  $padding-bottom: $segment-padding,
  $padding-top-mobile: $segment-padding-mobile,
  $padding-bottom-mobile: $segment-padding-mobile
) {
  flex-grow: 1;

  // Set up unitless values
  $padding-top-mobile-unitless: strip-unit($padding-top-mobile);
  $padding-bottom-mobile-unitless: strip-unit($padding-bottom-mobile);
  $padding-top-unitless: strip-unit($padding-top);
  $padding-bottom-unitless: strip-unit($padding-bottom);

  @include vertically-responsive(
    padding-top,
    $padding-top-mobile-unitless * 1px
  );
  @include vertically-responsive(
    padding-bottom,
    $padding-bottom-mobile-unitless * 1px
  );

  @media (min-width: $min-tablet) {
    @include vertically-responsive(
      padding-top,
      percentage(math.div($padding-top-unitless * 1px, $page-limit))
    );
    @include vertically-responsive(
      padding-bottom,
      percentage(math.div($padding-bottom-unitless * 1px, $page-limit))
    );
  }

  @media (min-width: $page-limit) {
    @include vertically-responsive(padding-top, $padding-top-unitless * 1px);
    @include vertically-responsive(
      padding-bottom,
      $padding-bottom-unitless * 1px
    );
  }
}

@mixin position-absolute($top, $right, $bottom, $left) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin position-fixed($top, $right, $bottom, $left) {
  position: fixed;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin container-wide() {
  padding-right: $gutter;
  padding-left: $gutter;

  @media (min-width: $min-tablet) {
    padding-right: $gutter * 2;
    padding-left: $gutter * 2;
  }
}

@mixin container() {
  flex-grow: 1;

  margin: 0 auto;
  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;

  max-width: $page-width + $container-gutter-mobile;

  @media (min-width: $min-mobile) {
    max-width: $page-width + $container-gutter-mobile * 2;
  }

  @media (min-width: $min-tablet) {
    padding-left: $container-gutter-tablet;
    padding-right: $container-gutter-tablet;
    max-width: $page-width + $container-gutter-tablet * 2;
  }

  @media (min-width: $min-desktop) {
    padding-left: $container-gutter-desktop;
    padding-right: $container-gutter-desktop;
    max-width: $page-width + $container-gutter-desktop * 2;
  }
}

@mixin container-right() {
  flex-grow: 1;

  padding-right: 0;

  @media (min-width: $min-tablet) {
    padding-right: 0;
  }

  @media (min-width: $min-desktop) {
    padding-right: $container-gutter-desktop;
  }

  @media (min-width: $min-big) {
    padding-right: calc((100% - #{$page-width}) / 2);
  }
}

@mixin container-left() {
  flex-grow: 1;

  padding-left: 0;

  @media (min-width: $min-tablet) {
    padding-left: 0;
  }

  @media (min-width: $min-desktop) {
    padding-left: $container-gutter-desktop;
  }

  @media (min-width: $min-big) {
    padding-left: calc((100% - #{$page-width}) / 2);
  }
}

@mixin js-only {
  html:not(:global(.no-js)) & {
    @content;
  }
}

@mixin no-js {
  html:not(:global(.js)) & {
    @content;
  }
}

@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (-o-min-device-pixel-ratio: 13/10),
    only screen and (min-resolution: 120dpi) {
    @content;
  }
}

// Gsap trans-in defaults
@mixin will-animate($transform: true, $opacity: true) {
  @include js-only {
    @if $opacity == true {
      opacity: 0;
    }

    @if $transform == true {
      will-change: opacity, transform;
    } @else {
      will-change: opacity;
    }
  }
}

@function convertify($number) {
  @if type-of($number) == 'number' and unitless($number) {
    @return percentage(math.div($number, $grid-column-count));
  }

  @return $number;
}

@mixin grid-row(
  $direction: ltr,
  $align: stretch,
  $justify: flex-start,
  $grid-gutter: $gutter,
  $wrap: wrap
) {
  display: flex;
  flex-wrap: $wrap;

  align-items: $align;
  justify-content: $justify;

  margin-left: -(math.div($grid-gutter, 2));
  margin-right: -(math.div($grid-gutter, 2));

  @if $direction == ltr {
    flex-direction: row;
  } @else {
    flex-direction: row-reverse;
  }
}

@mixin grid-col($width: 100%, $align: stretch, $grid-gutter: $gutter) {
  flex: none;
  align-self: $align;

  padding-left: math.div($grid-gutter, 2);
  padding-right: math.div($grid-gutter, 2);

  width: convertify($width);
}

@mixin grid-offset-left($offset: 1) {
  margin-left: convertify($offset);
}

@mixin grid-offset-right($offset: 1) {
  margin-right: convertify($offset);
}
